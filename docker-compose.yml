services:
  # Service for compiling x86 binaries
  compiler-x86:
    image: gcc:latest  # Using the latest GCC image for x86
    container_name: c-compiler-x86  # Name of the container for x86 compilation
    working_dir: /app  # Setting the working directory inside the container
    volumes:
      - .:/app  # Mounting the current directory to /app inside the container
    command: gcc -o output_x86 main.c  # Command to compile the C program into output_x86 binary

  # Service for compiling ARM binaries
  compiler-arm:
    image: ubuntu:latest  # Using the latest Ubuntu image as the base
    container_name: c-compiler-arm  # Name of the container for ARM compilation
    working_dir: /app  # Setting the working directory inside the container
    volumes:
      - .:/app  # Mounting the current directory to /app inside the container
    command: sh -c "apt-get update && apt-get install -y gcc-arm-linux-gnueabi && arm-linux-gnueabi-gcc -o output_arm main.c"
    # Updating package lists and installing the ARM cross-compiler, then compiling the C program into output_arm binary

  # Service for pipeline
  jenkins:
    image: jenkins/jenkins:lts-jdk17  # Use the Jenkins LTS image with JDK 17
    ports:
      - "8080:8080"  # Map port 8080 on the host to port 8080 in the container (Jenkins web interface)
      - "50000:50000"  # Map port 50000 on the host to port 50000 in the container (Jenkins agent communication)
    restart: on-failure  # Restart the container if it exits with a non-zero status
    volumes:
      - /data/jenkins:/var/jenkins_home  # Bind mount the host directory /data/jenkins to /var/jenkins_home in the container

  # Java web app
  webapp:  # Name of the service
    image: info8995-webapp  # Name of the Docker image to use
    build:  # Configuration for building the Docker image
      context: ./info8995-webapp  # Path to the directory containing the Dockerfile
    ports:  # Port mapping between the host and the container
      - "80:8080"  # Map port 80 on the host to port 8080 on the container
    container_name: info8995-webapp-container  # Name of the Docker container

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/provisioning:/etc/grafana/provisioning

volumes:
  grafana-storage:
